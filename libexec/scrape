#! /usr/bin/env bash

declare -a RUBIES
declare -A VERSION_FILTERS

push_engine() {
  local engine="$1"
  [ "$2" = "${2#-}" ] && local version_filter="$2"

  RUBIES+=("$engine")
  if [ -n "$version_filter" ]; then
    VERSION_FILTERS["$engine"]="$version_filter"

    # signal that a version filter was provided and needs shifted
    return 1
  fi
}

while [ $# -gt 0 ]; do
  case "$1" in
    -f | --force )
      OVERWRITE=true ;;
    -n | --dry-run )
      DRY_RUN=true ;;
    --cruby )
      push_engine cruby "$2" || shift ;;
    --rbx | --rubinius )
      push_engine rubinius "$2" || shift ;;
    * )
      echo "invalid usage" >&2
      exit 1 ;;
  esac
  shift
done

IFS=: read -ra DEF_PATHS <<<"${RUBY_BUILD_DEFINITIONS:-share/ruby-build}"

[ ${#RUBIES[@]} -gt 0 ] || RUBIES=(cruby rubinius)

is_recent_release() {
  local version="$1"

  test "${VERSION_FILTERS[$RUBY_ENGINE]}" \< "$version"
}

file_exists() {
  local filename="$1"
  [ -n "$OVERWRITE" ] && return 1

  for p in "${DEF_PATHS[@]}"; do
    [ -f "$p/$filename" ] && return
  done
}

write_file() {
  local filename="${DEF_PATHS[0]}/$1"

  if [ -n "$DRY_RUN" ]; then
    echo "Would write $filename"
    cat -
  else
    cat - > "$filename"
    echo "$filename written"
  fi
}

for RUBY_ENGINE in "${RUBIES[@]}"; do
  . "lib/scrape_${RUBY_ENGINE}.bash"

  scrape_"$RUBY_ENGINE"
done
